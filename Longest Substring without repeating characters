Given a string s, find the length of the longest substring without repeating characters. 


Example 1:

Input:
s = "geeksforgeeks"
Output: 7
Explanation: The substring starting from 
3rd character with length 7 contains all 
distinct characters.
 

Example 2:

Input:
s = "qwertqwer"
Output: 5
Explanation: The substring starting from 
2nd character with length 5 contains all 
distinct characters.
 

Your Task: 
You don't need to read input or print anything. Your task is to complete the function largestsubstring() which takes the string s as input parameter and returns the length of largest substring with all distinct characters.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N ≤ 100000  where N is the length of the string s.

SOLUTION:

class Solution {
public:
    int largestsubstring(string s) {
        
        //Your code here
        vector<int>map(256,-1);
        int left=0;
        int right=0;
        int n=s.size();
        int len=0;
        while(right<n){
            if(map[s[right]]!=-1)
            { left=max(map[s[right]]+1,left);
              map[s[right]]=right;
                len=max(len,right-left+1);
                right++;  
        }else{
              map[s[right]]=right;
                len=max(len,right-left+1);
                right++;  
            }}
        return len;
    }
};

