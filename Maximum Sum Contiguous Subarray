Given an array arr[] of N integers. Find the contiguous sub-array with maximum sum.

 

Example 1:

Input:
N = 5
arr[] = {1,2,3,-2,5}
Output: 9
Explanation: Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.
 

Example 2:

Input:
N = 4
arr[] = {-1,-2,-3,-4}
Output: -1
Explanation: Max subarray sum is -1 
of element (-1)
 

Your Task:
You do not need to read input or print anything. Complete the function maxSubarraySum() which returns the sum of subarray with maximum sum.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 ≤ N ≤ 10^6
-10^7 ≤ arr[i] <= 10^7

SOLUTION:


class Solution{
public:
    int maxSubarraySum(int arr[], int N){
        // Your code here
    int tillnow = arr[0];
    int curr = arr[0];
    
    for(int i = 1; i < N; i++)
    {
        curr = max(arr[i],curr + arr[i]);
        tillnow = max(tillnow, curr);
    }
    return tillnow;
    
    }
};
