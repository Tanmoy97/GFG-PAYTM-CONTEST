Given an array arr[] of size n, find the maximum sum that could be created without choosing adjacent elements.

 

Example 1:

Input:
n = 3
arr[] = {1, 2, 3}
Output: 4
Explanation: 1+3=4
 

Example 2:

Input:
n = 3
arr[] = {100, 200, 30}
Output: 200
Explanation: Possible answers could 
be 100, 200, 30 and 130 out of which 
200 is maximum.
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function maxSum() which takes an arr[] and its size n as input parameters and returns the maximum sum of non adjacent elements.

 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

 

Constraints:
1 ≤ n ≤ 10000
1 ≤ arr[i] ≤ 1e4
 
 
 SOLUTION:
 
 class Solution
{

public:
    int maxSum(int arr[], int n)
    {
        //code here
        int incl = arr[0]; 
  int excl = 0; 
  int excl_new; 
  int i; 
  
  for (i = 1; i < n; i++) 
  { 
     /* current max excluding i */
     excl_new = (incl > excl)? incl: excl; 
  
     /* current max including i */
     incl = excl + arr[i]; 
     excl = excl_new; 
  } 
  
   /* return max of incl and excl */
   return ((incl > excl)? incl : excl);
    }
};
